-- input_generator.vhd -------------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_textio.all;
library std;
use std.textio.all;

-- stimuli generator for AvalonMM_hyperRAMs27KLO641_interface
-- clock and active low reset must be provided
-- custom input delay (equal for all the input signals)

------------------------------------------------------------------------------------------------------------------

entity input_generator is
	generic	
	(
		custom_delay			: time := 0 ns
	);	
	port 
	(
		clk						: in		std_logic;
		rstN						: in  	std_logic;
		avs_s0_waitrequest 	: in		std_logic;
		avs_s0_address			: out		std_logic_vector(31 downto 0); 
		avs_s0_read       	: out 	std_logic;                                 
		avs_s0_write      	: out 	std_logic;             
		avs_s0_writedata  	: out 	std_logic_vector(15 downto 0)
	);
end input_generator;

------------------------------------------------------------------------------------------------------------------

architecture behaviour of input_generator is

	constant		mydelay		: time := 1 ns;
	file 			myfile		: text;
	signal 		end_file		: std_logic;
	
	begin
		
		inputGen: process (clk, rstN)
		variable inputLine	: line;
		variable readValue	: integer;
		variable fileStat		: file_open_status;
		begin
			file_open(fileStat, myfile, "stimuli.txt", read_mode);
			if (rstN = '0') then      
				avs_s0_read		<= '0' after mydelay;
				avs_s0_write 	<= '0' after mydelay;
			elsif (rising_edge(clk)) then
				if (waitrequest = '0') then
					
				
				
				
				
				
				flag := flag + 1;
				IF (flag = 10) THEN
					-- A non-valid input data is provided every 10 cycles
					filterInput <= TO_SIGNED (0, 11);
					valid <= '0' AFTER mydelay;
					flag := 0;
				ELSIF (NOT ENDFILE (myfile)) THEN
					READLINE (myfile, inputLine);
					READ (inputLine, readValue);
					filterInput <= TO_SIGNED (readValue, 11) AFTER mydelay;
					valid <= '1' AFTER mydelay;
					end_file <= '0' AFTER mydelay;
				ELSE
					valid <= '0' AFTER mydelay;        
					end_file <= '1' AFTER mydelay;
				END IF;
			
			
			
			
			end if;
		end process inputGen;
  
end behaviour;
